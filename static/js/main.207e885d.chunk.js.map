{"version":3,"sources":["components/weather.js","components/form.js","components/title.js","App.js","serviceWorker.js","index.js"],"names":["Weather","className","this","props","country","city","temperature","humidity","description","error","React","Component","Form","onSubmit","loadWeather","type","name","placeholder","Titles","Api_Key","App","state","undefined","getWeather","e","a","target","elements","value","preventDefault","fetch","api_call","json","response","console","log","setState","main","temp","sys","weather","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRA0CeA,E,iLApCP,OAEI,yBAAKC,UAAU,gBAEPC,KAAKC,MAAMC,SAAWF,KAAKC,MAAME,MAAQ,uBAAGJ,UAAU,gBAAb,YACrC,0BAAMA,UAAU,kBAAhB,KAAoCC,KAAKC,MAAME,KAA/C,KAAuDH,KAAKC,MAAMC,UAKtEF,KAAKC,MAAMG,aAAe,uBAAGL,UAAU,gBAAb,eACtB,0BAAMA,UAAU,kBAAhB,KAAoCC,KAAKC,MAAMG,cAKnDJ,KAAKC,MAAMI,UAAY,uBAAGN,UAAU,gBAAb,YACnB,0BAAMA,UAAU,kBAAhB,KAAoCC,KAAKC,MAAMI,WAKnDL,KAAKC,MAAMK,aAAe,uBAAGP,UAAU,gBAAb,cACtB,0BAAMA,UAAU,kBAAhB,KAAoCC,KAAKC,MAAMK,cAKnDN,KAAKC,MAAMM,OAAS,uBAAGR,UAAU,kBAAkBC,KAAKC,MAAMM,Y,GAhC5DC,IAAMC,WCebC,E,iLAXP,OACQ,0BAAMC,SAAYX,KAAKC,MAAMW,aACzB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAC9C,oD,GARDP,IAAMC,WCeVO,E,iLAXP,OAEI,6BAEI,wBAAIjB,UAAU,0BAAd,6BACA,uBAAGA,UAAU,6BAAb,0D,GATKS,IAAMC,WCMrBQ,EAAU,mCA0EDC,E,2MAnEbC,MAAQ,CAENf,iBAAagB,EACbjB,UAAMiB,EACNlB,aAASkB,EACTf,cAAUe,EACVd,iBAAac,EACbb,WAAOa,G,EAGTC,W,sCAAa,WAAOC,GAAP,qBAAAC,EAAA,4DAELpB,EAAOmB,EAAEE,OAAOC,SAAStB,KAAKuB,MAC9BxB,EAAUoB,EAAEE,OAAOC,SAASvB,QAAQwB,MAC1CJ,EAAEK,iBAJS,SAKYC,MAAM,oDAAD,OAAqDzB,EAArD,YAA6DD,EAA7D,kBAA8Ee,IAL/F,cAKLY,EALK,gBAMYA,EAASC,OANrB,OAMLC,EANK,OAOXC,QAAQC,IAAIF,GAET5B,GAAQD,EACT,EAAKgC,SAAS,CACZ9B,YAAa2B,EAASI,KAAKC,KAC3BjC,KAAM4B,EAASjB,KACfZ,QAAS6B,EAASM,IAAInC,QACtBG,SAAU0B,EAASI,KAAK9B,SACxBC,YAAayB,EAASO,QAAQ,GAAGhC,YACjCC,MAAO,KAGT,EAAK2B,SAAS,CACZ3B,MAAO,kCApBA,0C,8HA2BX,OAEE,6BACG,yBAAKR,UAAU,WACd,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,4BACf,kBAAC,EAAD,OAEA,yBAAKA,UAAU,2BACf,kBAAC,EAAD,CAAMa,YAAaZ,KAAKqB,aACtB,kBAAC,EAAD,CACEjB,YAAaJ,KAAKmB,MAAMf,YACxBD,KAAMH,KAAKmB,MAAMhB,KACjBD,QAASF,KAAKmB,MAAMjB,QACpBG,SAAUL,KAAKmB,MAAMd,SACrBC,YAAaN,KAAKmB,MAAMb,YACxBC,MAAOP,KAAKmB,MAAMZ,kB,GA1DpBC,IAAMC,WCAJ8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.207e885d.chunk.js","sourcesContent":["import React from \"react\";//importing react\r\n\r\nclass Weather extends React.Component{//creating a class called Weather and extends it with React. component\r\n\r\n    render(){//rendering the class\r\n\r\n        return(//returning the weather information\r\n\r\n            <div className=\"weather-info\">\r\n                {\r\n                    this.props.country && this.props.city && <p className=\"weather__key\">Location: \r\n                        <span className=\"weather__value\">  {this.props.city}, {this.props.country}</span>                    \r\n                    </p> \r\n                }\r\n                \r\n                {\r\n                    this.props.temperature && <p className=\"weather__key\">Temperature: \r\n                        <span className=\"weather__value\">  {this.props.temperature}</span>\r\n                    </p>\r\n                }\r\n\r\n                {\r\n                    this.props.humidity && <p className=\"weather__key\">Humidity: \r\n                        <span className=\"weather__value\">  {this.props.humidity}</span>\r\n                    </p>\r\n                }\r\n\r\n                {\r\n                    this.props.description && <p className=\"weather__key\">Conditions:  \r\n                        <span className=\"weather__value\">  {this.props.description}</span>\r\n                    </p>\r\n                }\r\n\r\n                {\r\n                    this.props.error && <p className=\"weather__error\">{this.props.error}</p>\r\n                }\r\n        \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Weather;//exporting the Weather class","import React from \"react\";//importing React\r\n\r\nclass Form extends React.Component{//creating a class called Form and extends it with React. component\r\n\r\n    render(){//rendering the class\r\n\r\n        return(//returning the class\r\n                <form onSubmit = {this.props.loadWeather}>\r\n                    <input type=\"text\" name=\"city\" placeholder=\"City...\"/>\r\n                    <input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\r\n                    <button>Get Weather</button>\r\n                </form>\r\n           \r\n        )\r\n    }\r\n}\r\n\r\nexport default Form;//exporting the form","import React from \"react\";//importing React from react\r\n\r\nclass Titles extends React.Component {//creating a class called Titles and extends it with React. component\r\n\r\n    render() {//rendering the class\r\n\r\n        return (//returning the class\r\n\r\n            <div>\r\n\r\n                <h1 className=\"title-container__title\">Amahle's Weather Scanner </h1>\r\n                <p className=\"title-container__subtitle\"> Helps you find weather conditions in cities...  </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Titles;//exporting the class","import React from \"react\";\n\n//importing the components from compoents folder\nimport Weather from \"./components/weather\";\nimport Form from \"./components/form\";\nimport Titles from \"./components/title\";\n\n//constructing the Api key\nconst Api_Key = \"8d2de98e089f1c28e1a22fc19a24ef04\";\n\n\n//creating a class and extends with React.Component\nclass App extends React.Component {\n\n//\n  state = {//making states\n\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n  getWeather = async (e) => {\n\n    const city = e.target.elements.city.value;//constructing a city\n    const country = e.target.elements.country.value;//constructing a country\n    e.preventDefault();   \n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${Api_Key}`);\n    const response = await api_call.json();//constructing a response\n    console.log(response);//consoling the response\n\n    if(city && country){//creating and if statement\n      this.setState({\n        temperature: response.main.temp,\n        city: response.name,\n        country: response.sys.country,\n        humidity: response.main.humidity,\n        description: response.weather[0].description,\n        error: \"\"\n      })\n    }else{\n      this.setState({//if the city or country is incorrect or empty there will be and error.\n        error: \"Please input search values...\"\n      })\n    }\n  }\n\n  render() {//rendering the class\n\n    return (//returning the components\n\n      <div>\n         <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n                <Titles />\n                </div>\n                <div className=\"col-xs-7 form-container\">\n                <Form loadWeather={this.getWeather} />\n                  <Weather\n                    temperature={this.state.temperature}\n                    city={this.state.city}\n                    country={this.state.country}\n                    humidity={this.state.humidity}\n                    description={this.state.description}\n                    error={this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    )\n  }\n}\nexport default App;//exporting the App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}